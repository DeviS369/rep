import pandas as pd
from datetime import datetime
from django.db import transaction

def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean and preprocess
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    blg_df = (
        pullout[pullout['RECEP_FLG'] == 'X']
        .groupby('buyer_article_no', as_index=False)['FKIMG']
        .sum()
        .rename(columns={'FKIMG': 'total_blg'})
    )

    # Mark outdated con_dates as RECEP_FLG = 'X'
    pullout.loc[
        (pullout['con_date'].notna()) & 
        (pullout['con_date'] < today) & 
        (pullout['RECEP_FLG'] != 'X'), 
        'RECEP_FLG'
    ] = 'X'

    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []
    result_rows = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.copy()
        total_blg = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock = total_blg.iloc[0] if not total_blg.empty else 0

        valid_git = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date')

        git_values = valid_git['FKIMG'].tolist()
        con_dates = valid_git['con_date'].tolist()

        monthly_groups = group.groupby(group['delivery_date'].dt.to_period('M'))
        month_keys = list(monthly_groups.groups.keys())

        git_qty_map = {}
        next_git_map = {}

        # Step 1: assign git_qty by month
        for i, month in enumerate(month_keys):
            git_qty = sum(git_values) if i == 0 else (git_values[i - 1] if i - 1 < len(git_values) else 0)
            git_qty_map[month] = git_qty

        # Step 2: assign next_git_qty by month difference
        for i in range(len(month_keys) - 1):
            current_git = git_qty_map[month_keys[i]]
            next_git = git_qty_map[month_keys[i + 1]]
            next_git_map[month_keys[i]] = current_git - next_git

        # Step 3: apply values per row
        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            delivery_qty = row['delivery_quantity']
            month_period = delivery_date.to_period('M')

            git_qty = git_qty_map.get(month_period, 0)
            next_git_qty = next_git_map.get(month_period, 0)
            future_con = [cd for cd in con_dates if pd.notna(cd) and cd < delivery_date]
            con_date = future_con[0] if future_con else pd.NaT

            stock -= delivery_qty
            blg_warehouse_stock = stock + next_git_qty

            # Update DataFrame values
            supplyon.loc[idx, 'git_qty'] = git_qty
            supplyon.loc[idx, 'next_git_qty'] = next_git_qty
            supplyon.loc[idx, 'con_date'] = con_date
            supplyon.loc[idx, 'blg_warehouse_stock'] = blg_warehouse_stock

            # Update corresponding Django model record
            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_qty
            rec.next_git_wh_date = con_date
            rec.blg_warehouse_stock = blg_warehouse_stock

            # Add latest warehouse stock
            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = latest.warehouse_qty if latest else 0

            update_records.append(rec)

            # Optional: Append to result report
            result_rows.append({
                'id': rec.id,
                'buyer_article_no': article,
                'delivery_date': delivery_date,
                'delivery_qty': delivery_qty,
                'git_qty': git_qty,
                'next_git_qty': next_git_qty,
                'con_date': con_date,
                'blg_warehouse_stock': blg_warehouse_stock,
                'warehouse_stock': rec.warehouse_stock,
            })

    # Final DB update
    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                [
                    "blg_warehouse_stock",
                    "git_qty",
                    "next_git_wh_qty",
                    "next_git_wh_date",
                    "warehouse_stock",
                ]
            )
        print(f"âœ… Updated {len(update_records)} supplyon_bmw records successfully.")

    return pd.DataFrame(result_rows)
