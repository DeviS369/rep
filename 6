import pandas as pd
from datetime import datetime
from django.db import transaction
import logging

logger = logging.getLogger(__name__)

def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}

    # Call data
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean supplyon and pullout data
    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Mark received pullouts
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    # Get BLG stock
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    # Prepare GIT quantities
    future_pullout = pullout[(pullout['RECEP_FLG'] != 'X') & (pullout['con_date'] > today)].sort_values(['buyer_article_no', 'con_date'])

    update_records = []

    for article, group in supplyon.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')
        stock_val_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_val_row.iloc[0]) if not stock_val_row.empty else 0

        fkimg_list = future_pullout[future_pullout['buyer_article_no'] == article]['FKIMG'].tolist()
        con_date_list = future_pullout[future_pullout['buyer_article_no'] == article]['con_date'].tolist()

        if not fkimg_list:
            continue

        total_fkimg_sum = sum(fkimg_list)

        git_qty_list = []
        next_git_qty_list = []
        con_date_mapping = []

        git_qty_list.append(total_fkimg_sum)

        for i in range(len(fkimg_list)):
            if i < len(fkimg_list) - 1:
                next_git_qty_list.append(fkimg_list[i] - fkimg_list[i+1])
                con_date_mapping.append(con_date_list[i+1])
            else:
                next_git_qty_list.append(fkimg_list[i])
                con_date_mapping.append(pd.NaT)

        group = group[group['delivery_date'] > today].copy()

        # Start updating rows
        idx = 0
        for supply_idx, row in group.iterrows():
            if idx >= len(git_qty_list):
                idx = len(git_qty_list) - 1  # Stay on last if delivery dates > pullout

            supplyon.at[supply_idx, 'blg_warehouse_stock'] = int(stock_val)
            supplyon.at[supply_idx, 'git_qty'] = int(git_qty_list[idx])
            supplyon.at[supply_idx, 'next_git_wh_qty'] = int(next_git_qty_list[idx])
            supplyon.at[supply_idx, 'next_git_wh_date'] = con_date_mapping[idx]

            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = int(stock_val)
            rec.git_qty = int(git_qty_list[idx])
            rec.next_git_wh_qty = int(next_git_qty_list[idx])
            rec.next_git_wh_date = con_date_mapping[idx]

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = latest.warehouse_qty if latest else 0

            update_records.append(rec)

            stock_val = stock_val + next_git_qty_list[idx] - row['delivery_quantity']
            idx += 1

    # Save all records
    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        logger.info(f"âœ… Successfully updated {len(update_records)} records.")

    # Return green columns only, sorted
    supplyon_sorted = supplyon[['id', 'delivery_date', 'buyer_article_no', 'delivery_quantity',
                                'blg_warehouse_stock', 'git_qty', 'next_git_wh_qty', 'next_git_wh_date']]

    supplyon_sorted = supplyon_sorted.sort_values(['buyer_article_no', 'delivery_date']).reset_index(drop=True)

    return supplyon_sorted
