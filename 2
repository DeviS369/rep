import pandas as pd
from datetime import datetime

def compute_blg_stock_final_pandas(supplyon, pullout):
    today = pd.to_datetime(datetime.today().date())

    # Clean data
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'], errors='coerce')
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Mark past pullouts
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    # BLG Stock
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    # Future pullouts
    future_pullout = pullout[(pullout['RECEP_FLG'] != 'X') & (pullout['con_date'] > today)].sort_values('con_date')
    fkimg_list = future_pullout['FKIMG'].tolist()
    con_date_list = future_pullout['con_date'].tolist()

    git_qty_map = {}
    next_git_qty_map = {}
    con_date_map = {}

    for i in range(len(fkimg_list)):
        month = pd.Period(con_date_list[i], freq='M')
        git_qty_map[month] = sum(fkimg_list[i:])
        if i + 1 < len(fkimg_list):
            next_git_qty_map[month] = git_qty_map[month] - fkimg_list[i + 1]
            con_date_map[month] = con_date_list[i + 1]
        else:
            next_git_qty_map[month] = fkimg_list[i]
            con_date_map[month] = pd.NaT

    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])

    # Result DataFrame
    results = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article]
        stock_val = stock_row['total_blg'].iloc[0] if not stock_row.empty else 0

        first_of_month = {}
        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            if pd.isna(delivery_date) or delivery_date <= today:
                continue

            month = pd.Period(delivery_date, freq='M')

            # Stock only once per month
            if month not in first_of_month:
                blg_warehouse_stock = stock_val
                first_of_month[month] = True
            else:
                blg_warehouse_stock = 0

            git_qty = git_qty_map.get(month, 0)
            next_git_qty = next_git_qty_map.get(month, 0)
            next_git_wh_date = con_date_map.get(month, pd.NaT)

            results.append({
                'buyer_article_no': article,
                'delivery_date': delivery_date,
                'delivery_qty': row['delivery_quantity'],
                'blg_warehouse_stock': blg_warehouse_stock,
                'git_qty': git_qty,
                'next_git_wh_qty': next_git_qty,
                'next_git_wh_date': next_git_wh_date
            })

    final_df = pd.DataFrame(results)

    # **SORT final result by delivery_date**
    final_df = final_df.sort_values(['buyer_article_no', 'delivery_date']).reset_index(drop=True)

    return final_df
