def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean data
    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT),
        errors='coerce'
    )
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)
    
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    # Calculate total_blg (past received quantity)
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    update_records = []
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    
    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date')

        # Stock value
        stock_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock_val = int(stock_row.iloc[0]) if not stock_row.empty else 0

        # Future pullout data
        future_pullout = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date')
        
        fkimg_list = future_pullout['FKIMG'].tolist()
        con_date_list = future_pullout['con_date'].tolist()

        fkimg_idx = 0  # index in fkimg_list
        previous_stock_val = stock_val

        current_month = None
        month_git_qty = 0
        month_next_git_qty = 0
        month_con_date = pd.NaT

        for row_pos, (idx, row) in enumerate(group.iterrows()):
            delivery_date = row['delivery_date']
            if delivery_date < today:
                continue

            row_month = pd.Period(delivery_date, freq='M')

            # Month change: recalculate git_qty, next_git_qty
            if (current_month != row_month):
                current_month = row_month
                month_git_qty = int(sum(fkimg_list[fkimg_idx:])) if fkimg_idx < len(fkimg_list) else 0
                if fkimg_idx < len(fkimg_list):
                    month_next_git_qty = int(month_git_qty - fkimg_list[fkimg_idx])
                    month_con_date = con_date_list[fkimg_idx]
                else:
                    month_next_git_qty = 0
                    month_con_date = pd.NaT

            # Update supplyon dataframe
            supplyon.at[idx, 'blg_warehouse_stock'] = previous_stock_val
            supplyon.at[idx, 'git_qty'] = month_git_qty
            supplyon.at[idx, 'next_git_wh_qty'] = month_next_git_qty
            supplyon.at[idx, 'next_git_wh_date'] = month_con_date

            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = previous_stock_val
            rec.git_qty = month_git_qty
            rec.next_git_wh_qty = month_next_git_qty
            rec.next_git_wh_date = month_con_date

            # warehouse stock from warehouse table
            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            update_records.append(rec)

            # Update stock value
            previous_stock_val = int(previous_stock_val + month_next_git_qty - row['delivery_quantity'])

            # Check end of month
            is_last_row = (row_pos == len(group) - 1)
            is_month_change = (not is_last_row) and (pd.Period(group.iloc[row_pos + 1]['delivery_date'], freq='M') != current_month)
            if is_last_row or is_month_change:
                fkimg_idx += 1  # move to next FKIMG for next month

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        print(f"âœ… Updated {len(update_records)} records successfully.")
