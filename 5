import pandas as pd
from datetime import datetime
from django.db import transaction
import logging

logger = logging.getLogger(__name__)

def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean supplyon and pullout
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    # Calculate total_blg (for info only, not used for starting stock_val)
    blg_df = pullout[pullout['RECEP_FLG'] == 'X'].groupby('buyer_article_no', as_index=False)['FKIMG'].sum()
    blg_df = blg_df.rename(columns={'FKIMG': 'total_blg'})

    # Calculate git_qty, next_git_qty, con_date
    future_pullouts = pullout[(pullout['RECEP_FLG'] != 'X') & (pullout['con_date'] > today)].sort_values('con_date')
    fkimg_list = future_pullouts['FKIMG'].tolist()
    con_date_list = future_pullouts['con_date'].tolist()

    git_qty_map = {}
    next_git_qty_map = {}
    con_date_map = {}

    if fkimg_list:
        total_fkimg_sum = sum(fkimg_list)
        for i in range(len(fkimg_list)):
            month = pd.Period(con_date_list[i], freq='M')
            git_qty_map[month] = int(total_fkimg_sum)  # **Fix**: Always full sum for current batch
            if i < len(fkimg_list) - 1:
                next_git_qty_map[month] = int(fkimg_list[i] - fkimg_list[i+1])
                con_date_map[month] = con_date_list[i+1]
            else:
                next_git_qty_map[month] = int(fkimg_list[i])
                con_date_map[month] = pd.NaT

    # Process and update records
    supplyon = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []

    for article, group in supplyon.groupby('buyer_article_no', sort=False):
        group = group[group['delivery_date'] > today]  # Only future
        if group.empty:
            continue

        # Start stock_val from git_qty, not total_blg
        month = pd.Period(group.iloc[0]['delivery_date'], freq='M')
        initial_git_qty = git_qty_map.get(month, 0)
        previous_stock_val = int(initial_git_qty)

        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            month = pd.Period(delivery_date, freq='M')
            git_qty = git_qty_map.get(month, 0)
            next_git_qty = next_git_qty_map.get(month, 0)
            con_date = con_date_map.get(month, pd.NaT)

            # Update supplyon DataFrame
            supplyon.at[idx, 'blg_warehouse_stock'] = int(previous_stock_val)
            supplyon.at[idx, 'git_qty'] = int(git_qty)
            supplyon.at[idx, 'next_git_wh_qty'] = int(next_git_qty)
            supplyon.at[idx, 'next_git_wh_date'] = con_date

            # Prepare database update
            rec = supplyon_bmw.objects.get(pk=row['id'])
            rec.blg_warehouse_stock = int(previous_stock_val)
            rec.git_qty = int(git_qty)
            rec.next_git_wh_qty = int(next_git_qty)
            rec.next_git_wh_date = con_date

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = int(latest.warehouse_qty) if latest else 0

            update_records.append(rec)

            # Update stock for next row
            previous_stock_val = int(previous_stock_val + next_git_qty - row['delivery_quantity'])

    # Save to database
    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                ["blg_warehouse_stock", "git_qty", "next_git_wh_qty", "next_git_wh_date", "warehouse_stock"]
            )
        logger.info(f"âœ… Updated {len(update_records)} records successfully.")

    return supplyon

