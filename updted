import pandas as pd
from datetime import datetime
from django.db import transaction

def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)
    
    # Clean and preprocess
    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce'
    )
    supplyon = supplyon.dropna(subset=['delivery_date'])

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Get total_blg from RECEP_FLG == 'X'
    blg_df = (
        pullout[pullout['RECEP_FLG'] == 'X']
        .groupby('buyer_article_no', as_index=False)['FKIMG']
        .sum()
        .rename(columns={'FKIMG': 'total_blg'})
    )

    # Sort supplyon data by buyer_article_no and delivery_date
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    result_rows = []
    update_records = []

    # Process each buyer_article_no group
    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        total_blg = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock = total_blg.iloc[0] if not total_blg.empty else 0
        prev_git_qty = 0
        
        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            delivery_qty = row.get('delivery_quantity', 0)
            stock -= delivery_qty  # Deduct delivery quantity from stock

            # Filter pullout data for valid entries
            valid_git = pullout[
                (pullout['buyer_article_no'] == article) &
                (pullout['RECEP_FLG'] != 'X') &
                (pullout['con_date'] > today) &
                (pullout['con_date'] <= delivery_date)
            ]

            # Calculate git_qty and next_git_qty
            if not valid_git.empty:
                # Calculate the sum of FKIMG for the current pullout entries
                git_sum = valid_git['FKIMG'].sum()

                # Update next_git_qty by subtracting the first location FKIMG value from the sum
                first_location_fkimg = valid_git['FKIMG'].iloc[0] if not valid_git.empty else 0
                next_git_qty = git_sum - first_location_fkimg
                git_qty = max(git_sum - prev_git_qty, 0)
                prev_git_qty = git_sum

                # Add git_qty to stock
                stock += next_git_qty
            else:
                next_git_qty = 0
                git_qty = 0

            # Set stock value (only if it's non-negative)
            stock_value = stock if stock >= 0 else None

            # Get the earliest con_date for the next_git_wh_date
            git_date = valid_git['con_date'].min().date() if not valid_git.empty else None

            # Update Django record
            rec = supplyon_bmw.objects.get(pk=row["id"])
            rec.blg_warehouse_stock = stock_value
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_qty
            rec.next_git_wh_date = git_date

            # Get the latest warehouse stock from bmw_warehouse
            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = latest.warehouse_qty if latest else 0
            update_records.append(rec)

            # Collect data for result DataFrame
            result_rows.append({
                'id': row['id'],
                'buyer_article_no': article,
                'delivery_date': delivery_date,
                'delivery_qty': delivery_qty,
                'git_qty': git_qty,
                'next_git_qty': next_git_qty,
                'git_date': git_date,
                'blg_warehouse_stock': stock_value,
                'warehouse_stock': rec.warehouse_stock,
            })

    # Perform bulk update on Django records
    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                [
                    "blg_warehouse_stock",
                    "git_qty",
                    "next_git_wh_qty",
                    "next_git_wh_date",
                    "warehouse_stock",
                ]
            )
        print(f"âœ… Successfully updated {len(update_records)} records.")

    # Return the result DataFrame for further processing or reporting
    return pd.DataFrame(result_rows)
