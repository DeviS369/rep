def compute_blg_stock():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)
    # Clean and convert data
    supplyon['delivery_date'] = pd.to_datetime(
        supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])
    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)
    # Delivered to BLG
    blg_df = (
        pullout[pullout['RECEP_FLG'] == 'X']
        .groupby('buyer_article_no', as_index=False)['FKIMG']
        .sum()
        .rename(columns={'FKIMG': 'total_blg'})
    )
    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    result_rows = []
    update_records = []
    # Process per article
    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.sort_values('delivery_date').reset_index(drop=True)
        total_blg = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        stock = total_blg.iloc[0] if not total_blg.empty else 0

        # Valid GIT for this article
        valid_git = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date').reset_index(drop=True)

        # Map: GIT batch to the first delivery date that matches
        git_delivery_map = {}
        for _, git_row in valid_git.iterrows():
            con_date = git_row['con_date']
            fkimg = git_row['FKIMG']
            for idx, row in group.iterrows():
                if row['delivery_date'] >= con_date and idx not in git_delivery_map:
                    git_delivery_map[idx] = {
                        'git_qty': fkimg,
                        'next_git_wh_qty': 0,
                        'next_git_wh_date': None
                    }
                    break

        # Now iterate through delivery rows
        for idx, row in group.iterrows():
            delivery_date = row['delivery_date']
            delivery_qty = row.get('delivery_quantity', 0)

            stock -= delivery_qty

            git_info = git_delivery_map.get(idx, {})
            git_qty = git_info.get('git_qty', 0)

            # Find next GIT row for "next_git_wh"
            next_git_wh_qty = 0
            next_git_wh_date = None
            for git_idx in range(idx + 1, len(group)):
                if git_idx in git_delivery_map:
                    next_git_wh_qty = git_delivery_map[git_idx]['git_qty']
                    next_git_wh_date = group.loc[git_idx, 'delivery_date'].date()
                    break

            stock += git_qty
            stock_value = stock if stock >= 0 else None

            rec = supplyon_bmw.objects.get(pk=row["id"])
            rec.blg_warehouse_stock = stock_value
            rec.git_qty = git_qty
            rec.next_git_wh_qty = next_git_wh_qty
            rec.next_git_wh_date = next_git_wh_date

            latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
            rec.warehouse_stock = latest.warehouse_qty if latest else 0

            update_records.append(rec)

            result_rows.append({
                'id': row['id'],
                'buyer_article_no': article,
                'delivery_date': delivery_date,
                'delivery_qty': delivery_qty,
                'git_qty': git_qty,
                'next_git_qty': next_git_wh_qty,
                'git_date': next_git_wh_date,
                'blg_warehouse_stock': stock_value,
                'warehouse_stock': rec.warehouse_stock,
            })

    # Save to DB
    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                [
                    "blg_warehouse_stock",
                    "git_qty",
                    "next_git_wh_qty",
                    "next_git_wh_date",
                    "warehouse_stock",
                ]
            )
    return result_rows
compute_blg_stock()  
