import pandas as pd
from datetime import datetime
from django.db import transaction

def compute_blg_stock_final():
    today = pd.to_datetime(datetime.today().date())
    data = {"IT_PULLOUT": []}
    supplyon, pullout = call_data(supplyon_bmw, data)

    # Clean and preprocess
    supplyon['delivery_date'] = pd.to_datetime(supplyon['delivery_date'].replace('Backorder', pd.NaT), errors='coerce')
    supplyon = supplyon.dropna(subset=['delivery_date'])

    pullout['con_date'] = pd.to_datetime(pullout['con_date'], errors='coerce')
    supplyon['delivery_quantity'] = pd.to_numeric(supplyon['delivery_quantity'], errors='coerce').fillna(0)
    pullout['FKIMG'] = pd.to_numeric(pullout['FKIMG'], errors='coerce').fillna(0)

    # Get total_blg
    blg_df = (
        pullout[pullout['RECEP_FLG'] == 'X']
        .groupby('buyer_article_no', as_index=False)['FKIMG']
        .sum()
        .rename(columns={'FKIMG': 'total_blg'})
    )

    # Set RECEP_FLG = 'X' for old pullouts
    pullout.loc[
        (pullout['con_date'].notna()) & (pullout['con_date'] < today) & (pullout['RECEP_FLG'] != 'X'),
        'RECEP_FLG'
    ] = 'X'

    supplyon_sorted = supplyon.sort_values(['buyer_article_no', 'delivery_date'])
    update_records = []
    result_rows = []

    for article, group in supplyon_sorted.groupby('buyer_article_no', sort=False):
        group = group.copy()
        total_blg_row = blg_df.loc[blg_df['buyer_article_no'] == article, 'total_blg']
        total_blg = total_blg_row.iloc[0] if not total_blg_row.empty else 0
        stock = total_blg

        valid_git = pullout[
            (pullout['buyer_article_no'] == article) &
            (pullout['RECEP_FLG'] != 'X') &
            (pullout['con_date'] > today)
        ].sort_values('con_date')

        git_values = valid_git['FKIMG'].tolist()
        con_dates = valid_git['con_date'].tolist()

        monthly_groups = group.groupby(group['delivery_date'].dt.to_period('M'))
        month_keys = list(monthly_groups.groups.keys())

        git_qty_map = {}
        next_git_map = {}

        for i, month in enumerate(month_keys):
            if i == 0:
                git_qty_map[month] = sum(git_values)
            else:
                git_qty_map[month] = git_values[i - 1] if i - 1 < len(git_values) else 0

        for i in range(len(month_keys) - 1):
            this_month = month_keys[i]
            next_month = month_keys[i + 1]
            this_git = git_qty_map.get(this_month, 0)
            next_git = git_qty_map.get(next_month, 0)
            next_git_map[this_month] = this_git - next_git

        for i, month in enumerate(month_keys):
            rows = monthly_groups.get_group(month).sort_values('delivery_date')
            git_qty = git_qty_map.get(month, 0)
            next_git_qty = next_git_map.get(month, 0) if month in next_git_map else 0

            for idx, row in rows.iterrows():
                delivery_date = row['delivery_date']
                delivery_qty = row['delivery_quantity']
                stock -= delivery_qty

                # Get the first valid con_date < delivery_date
                con_date_val = pd.NaT
                for cd in con_dates:
                    if pd.notna(cd) and cd < delivery_date:
                        con_date_val = cd
                        break

                # Update in-memory for pandas
                supplyon.at[idx, 'blg_warehouse_stock'] = stock
                supplyon.at[idx, 'git_qty'] = git_qty
                supplyon.at[idx, 'next_git_qty'] = next_git_qty
                supplyon.at[idx, 'con_date'] = con_date_val

                # Update Django record
                try:
                    rec = supplyon_bmw.objects.get(pk=row["id"])
                    rec.blg_warehouse_stock = stock
                    rec.git_qty = git_qty
                    rec.next_git_wh_qty = next_git_qty
                    rec.next_git_wh_date = con_date_val

                    latest = bmw_warehouse.objects.filter(buyer_article_no=article).order_by('-entry_date').first()
                    rec.warehouse_stock = latest.warehouse_qty if latest else 0
                    update_records.append(rec)

                    result_rows.append({
                        'id': row['id'],
                        'buyer_article_no': article,
                        'delivery_date': delivery_date,
                        'delivery_qty': delivery_qty,
                        'git_qty': git_qty,
                        'next_git_qty': next_git_qty,
                        'git_date': con_date_val,
                        'blg_warehouse_stock': stock,
                        'warehouse_stock': rec.warehouse_stock,
                    })
                except supplyon_bmw.DoesNotExist:
                    continue

    if update_records:
        with transaction.atomic():
            supplyon_bmw.objects.bulk_update(
                update_records,
                [
                    "blg_warehouse_stock",
                    "git_qty",
                    "next_git_wh_qty",
                    "next_git_wh_date",
                    "warehouse_stock",
                ]
            )
        print(f"âœ… Successfully updated {len(update_records)} records.")

    return pd.DataFrame(result_rows)
